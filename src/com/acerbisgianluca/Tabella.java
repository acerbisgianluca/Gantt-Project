package com.acerbisgianluca;

import javax.swing.table.DefaultTableModel;
import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import java.util.List;

/**
 * Contiene un form che include un panel ed una tabella contenente i risultati dei 2 algoritmi descritti in {@link com.acerbisgianluca.Main}.
 */
public class Tabella extends javax.swing.JFrame {

	private DefaultTableModel model;
	// Variables declaration - do not modify
	private javax.swing.JPanel panel;
	private javax.swing.JScrollPane scrollPane;
	private javax.swing.JTable table;

	/**
	 * Crea un nuovo form Tabella.
	 */
	public Tabella() {
		initComponents();
		this.setVisible(true);
		this.model = (DefaultTableModel) table.getModel();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		panel = new javax.swing.JPanel();
		scrollPane = new javax.swing.JScrollPane();
		table = new javax.swing.JTable();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		//table.setAutoCreateRowSorter(true);

		table.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][]{

				},
				new String[]{
						"Nome", "Durata", "Early Start", "Early Finish", "Late Start", "Late Finish"
				}
		) {
			Class[] types = new Class[]{
					java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
			};
			boolean[] canEdit = new boolean[]{
					false, false, false, false, false, false
			};

			public Class getColumnClass(int columnIndex) {
				return types[columnIndex];
			}

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});
		scrollPane.setViewportView(table);

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(panel);
		panel.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanel1Layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)
								.addContainerGap())
		);
		jPanel1Layout.setVerticalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanel1Layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addContainerGap())
		);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addContainerGap())
		);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	/**
	 * Crea le righe all'interno della tabella indicando nome, durata, data di inizio ES, data di fine EF, data di inizio LS e data di fine LF di ogni attività.
	 *
	 * @param esef La lista con le attività aggiornate dopo l'esecuzione dell'algoritmo ES/EF.
	 * @param lslf La lista con le attività aggiornate dopo l'esecuzione dell'algoritmo LS/LF.
	 */
	public void showResult(List<Task> esef, List<Task> lslf) {
		Task t, t1;
		for (int i = 0; i < esef.size(); i++) {
			t = esef.get(i);
			t1 = lslf.get(i);
			model.addRow(new Object[]{t.getName(), t.getDuration(), formatDate(t.getStart()), formatDate(t.getEnd()), formatDate(t1.getStart()), formatDate(t1.getEnd())});
		}
	}

	/**
	 * Ritorna una stringa in formato dd/MM/yyyy da una data in {@link java.util.GregorianCalendar}.
	 *
	 * @param calendar La data da cui estrarre la stringa.
	 * @return La data in formato leggibile.
	 */
	private String formatDate(GregorianCalendar calendar) {
		SimpleDateFormat fmt = new SimpleDateFormat("dd/MMM/yyyy");
		fmt.setCalendar(calendar);
		String dateFormatted = fmt.format(calendar.getTime());
		return dateFormatted;
	}
	// End of variables declaration
}
